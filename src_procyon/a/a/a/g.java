package a.a.a;

import y.e.*;
import org.apache.batik.svggen.*;
import a.a.c.*;
import y.h.*;
import java.util.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
import java.io.*;
import javax.xml.transform.*;
import org.apache.batik.dom.*;
import org.w3c.dom.*;
import java.awt.*;

public class g extends c
{
    private Document b;
    private SVGGraphics2D c;
    private f d;
    private ch e;
    private ch f;
    private boolean g;
    private boolean h;
    private final Map i;
    
    public g() {
        this.g = true;
        this.h = false;
        (this.i = new LinkedHashMap()).put(a.a.c.a.a, a.a.c.a.b);
    }
    
    public f a() {
        if (this.d != null) {
            this.d.a(this);
        }
        return this.d;
    }
    
    public void a(final bu graph2D, final OutputStream outputStream) {
        this.c = new h(this.c());
        this.c.getGeneratorContext().setComment("Generated by ySVG");
        if (!this.i.isEmpty()) {
            for (final Map.Entry<RenderingHints.Key, V> entry : this.i.entrySet()) {
                this.c.setRenderingHint((RenderingHints.Key)entry.getKey(), entry.getValue());
            }
        }
        this.c.setRenderingHint(a.a.b.a.a, (Object)new a.a.b.a());
        final ch f = (ch)graph2D.S();
        this.f = f;
        if (this.e != null) {
            (this.f = this.e).setGraph2D(graph2D);
        }
        if (this.f == null) {
            this.f = this.a(graph2D);
        }
        final Dimension canvasSize = this.f.getCanvasSize();
        if (this.d()) {
            this.c.setSVGCanvasSize(canvasSize);
        }
        final cd graph2DRenderer = this.f.getGraph2DRenderer();
        if (this.a() != null) {
            this.f.setGraph2DRenderer(this.a());
        }
        this.f.paintVisibleContent((Graphics2D)this.c);
        if (this.a() != null) {
            this.f.setGraph2DRenderer(graph2DRenderer);
        }
        if (f == null || this.f == this.e) {
            if (f != this.f) {
                graph2D.c(this.f);
            }
            if (f != null) {
                graph2D.a(f);
            }
        }
        this.f = null;
        this.a(this.c.getRoot(), new OutputStreamWriter(outputStream, "UTF-8"), this.h);
    }
    
    void a(final Element element, final Writer writer, final boolean b) {
        final Node parentNode = element.getParentNode();
        final Node nextSibling = element.getNextSibling();
        try {
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
            final DocumentFragment documentFragment = element.getOwnerDocument().createDocumentFragment();
            documentFragment.appendChild(element);
            if (b) {
                a.a.a.a.a(documentFragment, true);
            }
            if (this.a() != null) {
                this.a().a(documentFragment, writer);
            }
            else {
                this.a(documentFragment, writer);
            }
            writer.flush();
        }
        finally {
            if (parentNode != null) {
                if (nextSibling == null) {
                    parentNode.appendChild(element);
                }
                else {
                    parentNode.insertBefore(element, nextSibling);
                }
            }
        }
    }
    
    void a(final Node node, final Writer writer) {
        try {
            final DOMSource domSource = new DOMSource(node);
            final StreamResult streamResult = new StreamResult(writer);
            final TransformerFactory instance = TransformerFactory.newInstance();
            try {
                instance.setAttribute("indent-number", new Integer(2));
            }
            catch (IllegalArgumentException ex3) {}
            final Transformer transformer = instance.newTransformer();
            transformer.setOutputProperty("indent", "yes");
            transformer.transform(domSource, streamResult);
        }
        catch (TransformerConfigurationException ex) {
            throw new IOException(ex.getMessage());
        }
        catch (TransformerException ex2) {
            throw new IOException(ex2.getMessage());
        }
    }
    
    protected Document b() {
        return GenericDOMImplementation.getDOMImplementation().createDocument(null, "svg", null);
    }
    
    public Document c() {
        if (this.b == null) {
            this.b = this.b();
        }
        return this.b;
    }
    
    public ch a(final bu bu) {
        final ch ch = new ch(bu);
        final Rectangle a = bu.a();
        final Dimension dimension = new Dimension(a.width, a.height);
        ch.setSize(dimension);
        ch.setPreferredSize(dimension);
        ch.zoomToArea(a.x - 10, a.y - 10, a.width + 20, a.height + 20);
        ch.setPaintDetailThreshold(0.0);
        return ch;
    }
    
    public boolean d() {
        return this.g;
    }
}
