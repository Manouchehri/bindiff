package a.a.a;

import a.a.a.a;
import a.a.a.f;
import a.a.a.h;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.awt.RenderingHints.Key;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Map.Entry;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import y.h.bu;
import y.h.cd;
import y.h.ch;
import y.h.gI;

public class g extends y.e.c {
   private Document b;
   private SVGGraphics2D c;
   private f d;
   private ch e;
   private ch f;
   private boolean g = true;
   private boolean h = false;
   private final Map i = new LinkedHashMap();

   public g() {
      this.i.put(a.a.c.a.a, a.a.c.a.b);
   }

   public f a() {
      if(this.d != null) {
         this.d.a(this);
      }

      return this.d;
   }

   public void a(bu var1, OutputStream var2) {
      this.c = new h(this.c());
      this.c.getGeneratorContext().setComment("Generated by ySVG");
      if(!this.i.isEmpty()) {
         Iterator var3 = this.i.entrySet().iterator();

         while(var3.hasNext()) {
            Entry var4 = (Entry)var3.next();
            Key var5 = (Key)var4.getKey();
            this.c.setRenderingHint(var5, var4.getValue());
         }
      }

      this.c.setRenderingHint(a.a.b.a.a, new a.a.b.a());
      ch var6 = (ch)var1.S();
      this.f = var6;
      if(this.e != null) {
         this.f = this.e;
         this.f.setGraph2D(var1);
      }

      if(this.f == null) {
         this.f = this.a(var1);
      }

      Dimension var7 = this.f.getCanvasSize();
      if(this.d()) {
         this.c.setSVGCanvasSize(var7);
      }

      cd var8 = this.f.getGraph2DRenderer();
      if(this.a() != null) {
         this.f.setGraph2DRenderer(this.a());
      }

      this.f.paintVisibleContent(this.c);
      if(this.a() != null) {
         this.f.setGraph2DRenderer(var8);
      }

      if(var6 == null || this.f == this.e) {
         if(var6 != this.f) {
            var1.c(this.f);
         }

         if(var6 != null) {
            var1.a((gI)var6);
         }
      }

      this.f = null;
      this.a(this.c.getRoot(), new OutputStreamWriter(var2, "UTF-8"), this.h);
   }

   void a(Element var1, Writer var2, boolean var3) {
      Node var4 = var1.getParentNode();
      Node var5 = var1.getNextSibling();

      try {
         var1.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");
         var1.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
         DocumentFragment var6 = var1.getOwnerDocument().createDocumentFragment();
         var6.appendChild(var1);
         if(var3) {
            a.a(var6, true);
         }

         if(this.a() != null) {
            this.a().a(var6, var2);
         } else {
            this.a((Node)var6, (Writer)var2);
         }

         var2.flush();
      } finally {
         if(var4 != null) {
            if(var5 == null) {
               var4.appendChild(var1);
            } else {
               var4.insertBefore(var1, var5);
            }
         }

      }

   }

   void a(Node var1, Writer var2) {
      try {
         DOMSource var3 = new DOMSource(var1);
         StreamResult var4 = new StreamResult(var2);
         TransformerFactory var5 = TransformerFactory.newInstance();

         try {
            var5.setAttribute("indent-number", new Integer(2));
         } catch (IllegalArgumentException var7) {
            ;
         }

         Transformer var6 = var5.newTransformer();
         var6.setOutputProperty("indent", "yes");
         var6.transform(var3, var4);
      } catch (TransformerConfigurationException var8) {
         throw new IOException(var8.getMessage());
      } catch (TransformerException var9) {
         throw new IOException(var9.getMessage());
      }
   }

   protected Document b() {
      DOMImplementation var1 = GenericDOMImplementation.getDOMImplementation();
      return var1.createDocument((String)null, "svg", (DocumentType)null);
   }

   public Document c() {
      if(this.b == null) {
         this.b = this.b();
      }

      return this.b;
   }

   public ch a(bu var1) {
      ch var2 = new ch(var1);
      Rectangle var3 = var1.a();
      Dimension var4 = new Dimension(var3.width, var3.height);
      var2.setSize(var4);
      var2.setPreferredSize(var4);
      var2.zoomToArea((double)(var3.x - 10), (double)(var3.y - 10), (double)(var3.width + 20), (double)(var3.height + 20));
      var2.setPaintDetailThreshold(0.0D);
      return var2;
   }

   public boolean d() {
      return this.g;
   }
}
