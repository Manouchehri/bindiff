package org.jfree.data.jdbc;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import org.jfree.data.Range;
import org.jfree.data.RangeInfo;
import org.jfree.data.xy.AbstractXYDataset;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.util.Log;

public class JDBCXYDataset extends AbstractXYDataset implements RangeInfo, TableXYDataset, XYDataset {
   private transient Connection connection;
   private String[] columnNames;
   private ArrayList rows;
   private double maxValue;
   private double minValue;
   private boolean isTimeSeries;

   private JDBCXYDataset() {
      this.columnNames = new String[0];
      this.maxValue = 0.0D;
      this.minValue = 0.0D;
      this.isTimeSeries = false;
      this.rows = new ArrayList();
   }

   public JDBCXYDataset(String var1, String var2, String var3, String var4) {
      this();
      Class.forName(var2);
      this.connection = DriverManager.getConnection(var1, var3, var4);
   }

   public JDBCXYDataset(Connection var1) {
      this();
      this.connection = var1;
   }

   public JDBCXYDataset(Connection var1, String var2) {
      this(var1);
      this.executeQuery(var2);
   }

   public boolean isTimeSeries() {
      return this.isTimeSeries;
   }

   public void setTimeSeries(boolean var1) {
      this.isTimeSeries = var1;
   }

   public void executeQuery(String var1) {
      this.executeQuery(this.connection, var1);
   }

   public void executeQuery(Connection var1, String var2) {
      if(var1 == null) {
         throw new SQLException("There is no database to execute the query.");
      } else {
         ResultSet var3 = null;
         Statement var4 = null;

         try {
            var4 = var1.createStatement();
            var3 = var4.executeQuery(var2);
            ResultSetMetaData var5 = var3.getMetaData();
            int var6 = var5.getColumnCount();
            int var7 = 0;
            int[] var8 = new int[var6];

            int var9;
            int var10;
            for(var9 = 0; var9 < var6; ++var9) {
               try {
                  var10 = var5.getColumnType(var9 + 1);
                  switch(var10) {
                  case -7:
                  case -5:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 91:
                  case 92:
                  case 93:
                     ++var7;
                     var8[var9] = var10;
                     break;
                  default:
                     Log.warn("Unable to load column " + var9 + " (" + var10 + "," + var5.getColumnClassName(var9 + 1) + ")");
                     var8[var9] = 0;
                  }
               } catch (SQLException var26) {
                  var8[var9] = 0;
                  throw var26;
               }
            }

            if(var7 <= 1) {
               throw new SQLException("Not enough valid columns where generated by query.");
            }

            this.columnNames = new String[var7 - 1];
            var9 = 0;

            for(var10 = 1; var10 < var6; ++var10) {
               if(var8[var10] != 0) {
                  this.columnNames[var9] = var5.getColumnLabel(var10 + 1);
                  ++var9;
               }
            }

            if(this.rows != null) {
               for(var10 = 0; var10 < this.rows.size(); ++var10) {
                  ArrayList var11 = (ArrayList)this.rows.get(var10);
                  var11.clear();
               }

               this.rows.clear();
            }

            switch(var8[0]) {
            case 91:
            case 92:
            case 93:
               this.isTimeSeries = true;
               break;
            default:
               this.isTimeSeries = false;
            }

            int var28;
            ArrayList var29;
            while(var3.next()) {
               var29 = new ArrayList();

               for(var28 = 0; var28 < var6; ++var28) {
                  Object var12 = var3.getObject(var28 + 1);
                  switch(var8[var28]) {
                  case -5:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                     var29.add(var12);
                  case 0:
                     break;
                  case 91:
                  case 92:
                  case 93:
                     var29.add(new Long(((Date)var12).getTime()));
                     break;
                  default:
                     System.err.println("Unknown data");
                     var8[var28] = 0;
                  }
               }

               this.rows.add(var29);
            }

            if(this.rows.size() == 0) {
               var29 = new ArrayList();

               for(var28 = 0; var28 < var6; ++var28) {
                  if(var8[var28] != 0) {
                     var29.add(new Integer(0));
                  }
               }

               this.rows.add(var29);
            }

            if(this.rows.size() < 1) {
               this.maxValue = 0.0D;
               this.minValue = 0.0D;
            } else {
               var29 = (ArrayList)this.rows.get(0);
               this.maxValue = Double.NEGATIVE_INFINITY;
               this.minValue = Double.POSITIVE_INFINITY;

               for(var28 = 0; var28 < this.rows.size(); ++var28) {
                  var29 = (ArrayList)this.rows.get(var28);

                  for(int var30 = 1; var30 < var6; ++var30) {
                     Object var13 = var29.get(var30);
                     if(var13 != null) {
                        double var14 = ((Number)var13).doubleValue();
                        if(var14 < this.minValue) {
                           this.minValue = var14;
                        }

                        if(var14 > this.maxValue) {
                           this.maxValue = var14;
                        }
                     }
                  }
               }
            }

            this.fireDatasetChanged();
         } finally {
            if(var3 != null) {
               try {
                  var3.close();
               } catch (Exception var25) {
                  ;
               }
            }

            if(var4 != null) {
               try {
                  var4.close();
               } catch (Exception var24) {
                  ;
               }
            }

         }

      }
   }

   public Number getX(int var1, int var2) {
      ArrayList var3 = (ArrayList)this.rows.get(var2);
      return (Number)var3.get(0);
   }

   public Number getY(int var1, int var2) {
      ArrayList var3 = (ArrayList)this.rows.get(var2);
      return (Number)var3.get(var1 + 1);
   }

   public int getItemCount(int var1) {
      return this.rows.size();
   }

   public int getItemCount() {
      return this.getItemCount(0);
   }

   public int getSeriesCount() {
      return this.columnNames.length;
   }

   public Comparable getSeriesKey(int var1) {
      return var1 < this.columnNames.length && this.columnNames[var1] != null?this.columnNames[var1]:"";
   }

   public int getLegendItemCount() {
      return this.getSeriesCount();
   }

   public String[] getLegendItemLabels() {
      return this.columnNames;
   }

   public void close() {
      try {
         this.connection.close();
      } catch (Exception var2) {
         System.err.println("JdbcXYDataset: swallowing exception.");
      }

   }

   public double getRangeLowerBound(boolean var1) {
      return this.minValue;
   }

   public double getRangeUpperBound(boolean var1) {
      return this.maxValue;
   }

   public Range getRangeBounds(boolean var1) {
      return new Range(this.minValue, this.maxValue);
   }
}
