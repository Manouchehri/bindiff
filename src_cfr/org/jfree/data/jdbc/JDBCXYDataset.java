/*
 * Decompiled with CFR 0_115.
 */
package org.jfree.data.jdbc;

import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import org.jfree.data.Range;
import org.jfree.data.RangeInfo;
import org.jfree.data.xy.AbstractXYDataset;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.util.Log;

public class JDBCXYDataset
extends AbstractXYDataset
implements RangeInfo,
TableXYDataset,
XYDataset {
    private transient Connection connection;
    private String[] columnNames = new String[0];
    private ArrayList rows = new ArrayList();
    private double maxValue = 0.0;
    private double minValue = 0.0;
    private boolean isTimeSeries = false;

    private JDBCXYDataset() {
    }

    public JDBCXYDataset(String string, String string2, String string3, String string4) {
        this();
        Class.forName(string2);
        this.connection = DriverManager.getConnection(string, string3, string4);
    }

    public JDBCXYDataset(Connection connection) {
        this();
        this.connection = connection;
    }

    public JDBCXYDataset(Connection connection, String string) {
        this(connection);
        this.executeQuery(string);
    }

    public boolean isTimeSeries() {
        return this.isTimeSeries;
    }

    public void setTimeSeries(boolean bl2) {
        this.isTimeSeries = bl2;
    }

    public void executeQuery(String string) {
        this.executeQuery(this.connection, string);
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     * Unable to fully structure code
     * Enabled unnecessary exception pruning
     */
    public void executeQuery(Connection var1_1, String var2_2) {
        if (var1_1 == null) {
            throw new SQLException("There is no database to execute the query.");
        }
        var3_3 = null;
        var4_4 = null;
        try {
            block42 : {
                var4_4 = var1_1.createStatement();
                var3_3 = var4_4.executeQuery(var2_2);
                var5_5 = var3_3.getMetaData();
                var6_8 = var5_5.getColumnCount();
                var7_9 = 0;
                var8_10 = new int[var6_8];
                for (var9_11 = 0; var9_11 < var6_8; ++var9_11) {
                    try {
                        var10_12 = var5_5.getColumnType(var9_11 + 1);
                        switch (var10_12) {
                            case -7: 
                            case -5: 
                            case 2: 
                            case 3: 
                            case 4: 
                            case 5: 
                            case 6: 
                            case 7: 
                            case 8: 
                            case 91: 
                            case 92: 
                            case 93: {
                                ++var7_9;
                                var8_10[var9_11] = var10_12;
                                ** break;
                            }
                        }
                        Log.warn(new StringBuffer().append("Unable to load column ").append(var9_11).append(" (").append(var10_12).append(",").append(var5_5.getColumnClassName(var9_11 + 1)).append(")").toString());
                        var8_10[var9_11] = 0;
                        ** break;
lbl23: // 2 sources:
                        continue;
                    }
                    catch (SQLException var10_13) {
                        var8_10[var9_11] = 0;
                        throw var10_13;
                    }
                }
                if (var7_9 <= 1) {
                    throw new SQLException("Not enough valid columns where generated by query.");
                }
                this.columnNames = new String[var7_9 - 1];
                var9_11 = 0;
                for (var10_12 = 1; var10_12 < var6_8; ++var10_12) {
                    if (var8_10[var10_12] == 0) continue;
                    this.columnNames[var9_11] = var5_5.getColumnLabel(var10_12 + 1);
                    ++var9_11;
                }
                if (this.rows != null) {
                    for (var10_12 = 0; var10_12 < this.rows.size(); ++var10_12) {
                        var11_17 = (ArrayList)this.rows.get(var10_12);
                        var11_17.clear();
                    }
                    this.rows.clear();
                }
                switch (var8_10[0]) {
                    case 91: 
                    case 92: 
                    case 93: {
                        this.isTimeSeries = true;
                        ** break;
                    }
                }
                this.isTimeSeries = false;
lbl47: // 2 sources:
                do {
                    if (var3_3.next()) {
                        var10_14 = new ArrayList<Object>();
                        var11_18 = false;
                    } else {
                        if (this.rows.size() == 0) {
                            var10_15 = new ArrayList<Integer>();
                            var11_20 = false;
                            while (++var11_21 < var6_8) {
                                if (var8_10[var11_21] == 0) continue;
                                var10_15.add(new Integer(0));
                            }
                            this.rows.add(var10_15);
                        }
                        if (this.rows.size() < 1) {
                            this.maxValue = 0.0;
                            this.minValue = 0.0;
                            break block42;
                        }
                        var10_16 = (ArrayList)this.rows.get(0);
                        this.maxValue = Double.NEGATIVE_INFINITY;
                        this.minValue = Double.POSITIVE_INFINITY;
                        break;
                    }
                    while (++var11_19 < var6_8) {
                        var12_22 = var3_3.getObject((int)(var11_19 + true));
                        switch (var8_10[var11_19]) {
                            case -5: 
                            case 2: 
                            case 3: 
                            case 4: 
                            case 5: 
                            case 6: 
                            case 7: 
                            case 8: {
                                var10_14.add(var12_22);
                                ** break;
                            }
                            case 91: 
                            case 92: 
                            case 93: {
                                var10_14.add(new Long(((Date)var12_22).getTime()));
                                ** break;
                            }
                            case 0: {
                                ** break;
                            }
                        }
                        System.err.println("Unknown data");
                        var8_10[var11_19] = 0;
lbl81: // 4 sources:
                    }
                    this.rows.add(var10_14);
                } while (true);
                for (var11_17 = (reference)false ? 1 : 0; var11_17 < this.rows.size(); ++var11_17) {
                    var10_16 = (ArrayList)this.rows.get((int)var11_17);
                    for (var12_22 = (reference)true ? 1 : 0; var12_22 < var6_8; ++var12_22) {
                        var13_23 = var10_16.get((int)var12_22);
                        if (var13_23 == null) continue;
                        var14_24 = ((Number)var13_23).doubleValue();
                        if (var14_24 < this.minValue) {
                            this.minValue = var14_24;
                        }
                        if (var14_24 <= this.maxValue) continue;
                        this.maxValue = var14_24;
                    }
                }
            }
            this.fireDatasetChanged();
            return;
        }
        finally {
            if (var3_3 != null) {
                try {
                    var3_3.close();
                }
                catch (Exception var5_6) {}
            }
            if (var4_4 != null) {
                try {
                    var4_4.close();
                }
                catch (Exception var5_7) {}
            }
        }
    }

    @Override
    public Number getX(int n2, int n3) {
        ArrayList arrayList = (ArrayList)this.rows.get(n3);
        return (Number)arrayList.get(0);
    }

    @Override
    public Number getY(int n2, int n3) {
        ArrayList arrayList = (ArrayList)this.rows.get(n3);
        return (Number)arrayList.get(n2 + 1);
    }

    @Override
    public int getItemCount(int n2) {
        return this.rows.size();
    }

    @Override
    public int getItemCount() {
        return this.getItemCount(0);
    }

    @Override
    public int getSeriesCount() {
        return this.columnNames.length;
    }

    @Override
    public Comparable getSeriesKey(int n2) {
        if (n2 >= this.columnNames.length) return "";
        if (this.columnNames[n2] == null) return "";
        return this.columnNames[n2];
    }

    public int getLegendItemCount() {
        return this.getSeriesCount();
    }

    public String[] getLegendItemLabels() {
        return this.columnNames;
    }

    public void close() {
        try {
            this.connection.close();
            return;
        }
        catch (Exception var1_1) {
            System.err.println("JdbcXYDataset: swallowing exception.");
        }
    }

    @Override
    public double getRangeLowerBound(boolean bl2) {
        return this.minValue;
    }

    @Override
    public double getRangeUpperBound(boolean bl2) {
        return this.maxValue;
    }

    @Override
    public Range getRangeBounds(boolean bl2) {
        return new Range(this.minValue, this.maxValue);
    }
}

