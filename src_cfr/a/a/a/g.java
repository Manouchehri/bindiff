/*
 * Decompiled with CFR 0_115.
 * 
 * Could not load the following classes:
 *  org.apache.batik.dom.GenericDOMImplementation
 *  org.apache.batik.svggen.SVGGeneratorContext
 *  org.apache.batik.svggen.SVGGraphics2D
 */
package a.a.a;

import a.a.a.a;
import a.a.a.f;
import a.a.a.h;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentFragment;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import y.e.c;
import y.h.bu;
import y.h.cd;
import y.h.ch;
import y.h.gI;

public class g
extends c {
    private Document b;
    private SVGGraphics2D c;
    private f d;
    private ch e;
    private ch f;
    private boolean g = true;
    private boolean h = false;
    private final Map i = new LinkedHashMap();

    public g() {
        this.i.put(a.a.c.a.a, a.a.c.a.b);
    }

    public f a() {
        if (this.d == null) return this.d;
        this.d.a(this);
        return this.d;
    }

    @Override
    public void a(bu bu2, OutputStream outputStream) {
        Object object;
        Object object2;
        Object object3;
        this.c = new h(this.c());
        this.c.getGeneratorContext().setComment("Generated by ySVG");
        if (!this.i.isEmpty()) {
            object3 = this.i.entrySet().iterator();
            while (object3.hasNext()) {
                object = object3.next();
                object2 = (RenderingHints.Key)object.getKey();
                this.c.setRenderingHint((RenderingHints.Key)object2, object.getValue());
            }
        }
        this.c.setRenderingHint(a.a.b.a.a, (Object)new a.a.b.a());
        this.f = object3 = (ch)bu2.S();
        if (this.e != null) {
            this.f = this.e;
            this.f.setGraph2D(bu2);
        }
        if (this.f == null) {
            this.f = this.a(bu2);
        }
        object = this.f.getCanvasSize();
        if (this.d()) {
            this.c.setSVGCanvasSize((Dimension)object);
        }
        object2 = this.f.getGraph2DRenderer();
        if (this.a() != null) {
            this.f.setGraph2DRenderer(this.a());
        }
        this.f.paintVisibleContent((Graphics2D)this.c);
        if (this.a() != null) {
            this.f.setGraph2DRenderer((cd)object2);
        }
        if (object3 == null || this.f == this.e) {
            if (object3 != this.f) {
                bu2.c(this.f);
            }
            if (object3 != null) {
                bu2.a((gI)object3);
            }
        }
        this.f = null;
        this.a(this.c.getRoot(), new OutputStreamWriter(outputStream, "UTF-8"), this.h);
    }

    /*
     * WARNING - Removed try catching itself - possible behaviour change.
     */
    void a(Element element, Writer writer, boolean bl2) {
        Node node = element.getParentNode();
        Node node2 = element.getNextSibling();
        try {
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns", "http://www.w3.org/2000/svg");
            element.setAttributeNS("http://www.w3.org/2000/xmlns/", "xmlns:xlink", "http://www.w3.org/1999/xlink");
            DocumentFragment documentFragment = element.getOwnerDocument().createDocumentFragment();
            documentFragment.appendChild(element);
            if (bl2) {
                a.a(documentFragment, true);
            }
            if (this.a() != null) {
                this.a().a(documentFragment, writer);
            } else {
                this.a(documentFragment, writer);
            }
            writer.flush();
            Object var8_7 = null;
            if (node == null) return;
            if (node2 == null) {
                node.appendChild(element);
                return;
            }
            node.insertBefore(element, node2);
            return;
        }
        catch (Throwable var7_9) {
            Object var8_8 = null;
            if (node == null) throw var7_9;
            if (node2 == null) {
                node.appendChild(element);
                throw var7_9;
            }
            node.insertBefore(element, node2);
            throw var7_9;
        }
    }

    void a(Node node, Writer writer) {
        try {
            DOMSource dOMSource = new DOMSource(node);
            StreamResult streamResult = new StreamResult(writer);
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            try {
                transformerFactory.setAttribute("indent-number", new Integer(2));
            }
            catch (IllegalArgumentException var6_8) {
                // empty catch block
            }
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty("indent", "yes");
            transformer.transform(dOMSource, streamResult);
            return;
        }
        catch (TransformerConfigurationException var3_4) {
            throw new IOException(var3_4.getMessage());
        }
        catch (TransformerException var3_5) {
            throw new IOException(var3_5.getMessage());
        }
    }

    protected Document b() {
        DOMImplementation dOMImplementation = GenericDOMImplementation.getDOMImplementation();
        return dOMImplementation.createDocument(null, "svg", null);
    }

    public Document c() {
        if (this.b != null) return this.b;
        this.b = this.b();
        return this.b;
    }

    public ch a(bu bu2) {
        ch ch2 = new ch(bu2);
        Rectangle rectangle = bu2.a();
        Dimension dimension = new Dimension(rectangle.width, rectangle.height);
        ch2.setSize(dimension);
        ch2.setPreferredSize(dimension);
        ch2.zoomToArea(rectangle.x - 10, rectangle.y - 10, rectangle.width + 20, rectangle.height + 20);
        ch2.setPaintDetailThreshold(0.0);
        return ch2;
    }

    public boolean d() {
        return this.g;
    }
}

